[1mdiff --git a/SETUP_GUIDE.md b/SETUP_GUIDE.md[m
[1mnew file mode 100644[m
[1mindex 0000000..cbaa296[m
[1m--- /dev/null[m
[1m+++ b/SETUP_GUIDE.md[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m# üöÄ Quick Fix for Production[m
[32m+[m
[32m+[m[32m## The Problem[m
[32m+[m[32mYour Supabase database is missing the `waitlist` table, which is causing the 500 error.[m
[32m+[m
[32m+[m[32m## Step 1: Set Up Your Database[m
[32m+[m
[32m+[m[32m1. **Go to your Supabase dashboard**: https://app.supabase.com[m
[32m+[m[32m2. **Select your project**: `gcqxuhjzczpztadfrqdz`[m
[32m+[m[32m3. **Go to SQL Editor** (left sidebar)[m
[32m+[m[32m4. **Copy and paste** the contents of `setup-database.sql` into the editor[m
[32m+[m[32m5. **Click "Run"** to execute the SQL[m
[32m+[m
[32m+[m[32m## Step 2: Test the Database[m
[32m+[m
[32m+[m[32mAfter running the SQL, test your connection:[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mnode test-supabase.js[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mYou should see:[m
[32m+[m[32m```[m
[32m+[m[32m‚úÖ Connection successful![m
[32m+[m[32m‚úÖ Insert successful! Created record: [some-id][m
[32m+[m[32m‚úÖ Test record cleaned up[m
[32m+[m[32müéâ All tests passed![m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Step 3: Deploy the Fix[m
[32m+[m
[32m+[m[32mRun the deploy script:[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mdeploy-fix.bat[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mOr manually:[m
[32m+[m[32m```bash[m
[32m+[m[32mgit add .[m
[32m+[m[32mgit commit -m "Fix API route with better error handling"[m
[32m+[m[32mgit push origin main[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Step 4: Test Your Live Site[m
[32m+[m
[32m+[m[32m1. Wait 2-3 minutes for Vercel to deploy[m
[32m+[m[32m2. Go to your live site[m
[32m+[m[32m3. Try submitting the waitlist form[m
[32m+[m[32m4. It should now work! üéâ[m
[32m+[m
[32m+[m[32m## What This Fixes[m
[32m+[m
[32m+[m[32m- ‚úÖ Creates the missing `waitlist` table[m
[32m+[m[32m- ‚úÖ Sets up proper Row Level Security (RLS) policies[m
[32m+[m[32m- ‚úÖ Enables anonymous users to insert records[m
[32m+[m[32m- ‚úÖ Adds performance indexes[m
[32m+[m[32m- ‚úÖ Simplifies the API route for better reliability[m
[32m+[m
[32m+[m[32m## If You Still Have Issues[m
[32m+[m
[32m+[m[32m1. **Check Vercel environment variables** are set correctly[m
[32m+[m[32m2. **Verify the table was created** in Supabase dashboard[m
[32m+[m[32m3. **Check Vercel function logs** for specific error messages[m
[32m+[m
[32m+[m[32mYour waitlist should be working in 5 minutes! üöÄ[m
[1mdiff --git a/SUPABASE_CHECKLIST.md b/SUPABASE_CHECKLIST.md[m
[1mnew file mode 100644[m
[1mindex 0000000..bc7dd98[m
[1m--- /dev/null[m
[1m+++ b/SUPABASE_CHECKLIST.md[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32m# üîç Supabase Connection Debug Checklist[m
[32m+[m
[32m+[m[32m## Step 1: Verify Your Supabase Project[m
[32m+[m
[32m+[m[32m1. **Go to**: https://app.supabase.com[m
[32m+[m[32m2. **Check if your project is active** (not paused)[m
[32m+[m[32m3. **Verify project URL**: `gcqxuhjzczpztadfrqdz`[m
[32m+[m[32m4. **Check project status** - should show "Active"[m
[32m+[m
[32m+[m[32m## Step 2: Verify API Keys[m
[32m+[m
[32m+[m[32m1. **Go to**: Settings ‚Üí API[m
[32m+[m[32m2. **Copy the Project URL** - should be: `https://gcqxuhjzczpztadfrqdz.supabase.co`[m
[32m+[m[32m3. **Copy the anon public key** - should start with: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`[m
[32m+[m
[32m+[m[32m## Step 3: Check Table Structure[m
[32m+[m
[32m+[m[32m1. **Go to**: Database ‚Üí Tables[m
[32m+[m[32m2. **Verify `waitlist` table exists**[m
[32m+[m[32m3. **Click on the table** to see columns[m
[32m+[m[32m4. **Note down the exact column names**[m
[32m+[m
[32m+[m[32m## Step 4: Check RLS Policies[m
[32m+[m
[32m+[m[32m1. **Go to**: Database ‚Üí Policies[m
[32m+[m[32m2. **Look for `waitlist` table policies**[m
[32m+[m[32m3. **Should have policies for `anon` role**[m
[32m+[m
[32m+[m[32m## Step 5: Run Debug Script[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mnode debug-supabase.js[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThis will show us exactly what's failing.[m
[32m+[m
[32m+[m[32m## Common Issues & Solutions[m
[32m+[m
[32m+[m[32m### Issue 1: Project Paused[m
[32m+[m[32m- **Symptom**: Connection timeout[m
[32m+[m[32m- **Solution**: Resume project in Supabase dashboard[m
[32m+[m
[32m+[m[32m### Issue 2: Wrong API Key[m
[32m+[m[32m- **Symptom**: "Invalid API key" error[m
[32m+[m[32m- **Solution**: Use anon key, not service role key[m
[32m+[m
[32m+[m[32m### Issue 3: RLS Blocking Access[m
[32m+[m[32m- **Symptom**: "Permission denied" error[m
[32m+[m[32m- **Solution**: Run the RLS fix script[m
[32m+[m
[32m+[m[32m### Issue 4: Table Doesn't Exist[m
[32m+[m[32m- **Symptom**: "relation does not exist" error[m
[32m+[m[32m- **Solution**: Create the table[m
[32m+[m
[32m+[m[32m## Quick Test Commands[m
[32m+[m
[32m+[m[32mTest basic connectivity:[m
[32m+[m[32m```bash[m
[32m+[m[32mcurl -X GET "https://gcqxuhjzczpztadfrqdz.supabase.co/rest/v1/waitlist?select=id&limit=1" \[m
[32m+[m[32m  -H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjcXh1aGp6Y3pwenRhZGZycWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NDkwNjQsImV4cCI6MjA3MDIyNTA2NH0.OhaZygdRS_v0wIoQKgVHWXCw1K7QM6RrVoGi8NVhIvg" \[m
[32m+[m[32m  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjcXh1aGp6Y3pwenRhZGZycWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NDkwNjQsImV4cCI6MjA3MDIyNTA2NH0.OhaZygdRS_v0wIoQKgVHWXCw1K7QM6RrVoGi8NVhIvg"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mRun the debug script and share the output![m
[1mdiff --git a/debug-supabase.js b/debug-supabase.js[m
[1mnew file mode 100644[m
[1mindex 0000000..31f2b82[m
[1m--- /dev/null[m
[1m+++ b/debug-supabase.js[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32m// Debug Supabase connection issues[m
[32m+[m[32mconst { createClient } = require('@supabase/supabase-js')[m
[32m+[m
[32m+[m[32mconst SUPABASE_URL = 'https://gcqxuhjzczpztadfrqdz.supabase.co'[m
[32m+[m[32mconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjcXh1aGp6Y3pwenRhZGZycWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NDkwNjQsImV4cCI6MjA3MDIyNTA2NH0.OhaZygdRS_v0wIoQKgVHWXCw1K7QM6RrVoGi8NVhIvg'[m
[32m+[m
[32m+[m[32mconsole.log('üîç Debugging Supabase connection...')[m
[32m+[m[32mconsole.log('URL:', SUPABASE_URL)[m
[32m+[m[32mconsole.log('Key length:', SUPABASE_ANON_KEY.length)[m
[32m+[m[32mconsole.log('Key starts with:', SUPABASE_ANON_KEY.substring(0, 20) + '...')[m
[32m+[m
[32m+[m[32mtry {[m
[32m+[m[32m  console.log('üì° Creating Supabase client...')[m
[32m+[m[32m  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)[m
[32m+[m[32m  console.log('‚úÖ Client created successfully')[m
[32m+[m[41m  [m
[32m+[m[32m  console.log('üîç Testing basic connection...')[m
[32m+[m[41m  [m
[32m+[m[32m  // Test 1: Simple health check[m
[32m+[m[32m  supabase[m
[32m+[m[32m    .from('waitlist')[m
[32m+[m[32m    .select('id')[m
[32m+[m[32m    .limit(1)[m
[32m+[m[32m    .then(({ data, error }) => {[m
[32m+[m[32m      if (error) {[m
[32m+[m[32m        console.error('‚ùå Error details:')[m
[32m+[m[32m        console.error('Message:', error.message)[m
[32m+[m[32m        console.error('Code:', error.code)[m
[32m+[m[32m        console.error('Details:', error.details)[m
[32m+[m[32m        console.error('Hint:', error.hint)[m
[32m+[m[32m        console.error('Full error:', JSON.stringify(error, null, 2))[m
[32m+[m[32m      } else {[m
[32m+[m[32m        console.log('‚úÖ Connection successful!')[m
[32m+[m[32m        console.log('Data:', data)[m
[32m+[m[32m      }[m
[32m+[m[32m    })[m
[32m+[m[32m    .catch(err => {[m
[32m+[m[32m      console.error('‚ùå Promise rejection:', err.message)[m
[32m+[m[32m    })[m
[32m+[m[41m    [m
[32m+[m[32m} catch (error) {[m
[32m+[m[32m  console.error('‚ùå Failed to create client:', error.message)[m
[32m+[m[32m}[m
[1mdiff --git a/deploy-fix.bat b/deploy-fix.bat[m
[1mnew file mode 100644[m
[1mindex 0000000..8ef3121[m
[1m--- /dev/null[m
[1m+++ b/deploy-fix.bat[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m@echo off[m
[32m+[m[32mecho Deploying API fix to production...[m
[32m+[m[32mecho.[m
[32m+[m
[32m+[m[32mecho Adding files to git...[m
[32m+[m[32mgit add .[m
[32m+[m
[32m+[m[32mecho Committing changes...[m
[32m+[m[32mgit commit -m "Fix API route with better error handling and debugging"[m
[32m+[m
[32m+[m[32mecho Pushing to GitHub...[m
[32m+[m[32mgit push origin main[m
[32m+[m
[32m+[m[32mecho.[m
[32m+[m[32mecho ‚úÖ Deployment started![m[41m [m
[32m+[m[32mecho Check your Vercel dashboard for the new deployment.[m
[32m+[m[32mecho.[m
[32m+[m[32mpause[m
[1mdiff --git a/fix-rls-policies.sql b/fix-rls-policies.sql[m
[1mnew file mode 100644[m
[1mindex 0000000..44e4742[m
[1m--- /dev/null[m
[1m+++ b/fix-rls-policies.sql[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32m-- Fix RLS Policies for ProfitLens Waitlist[m
[32m+[m[32m-- Run this in your Supabase SQL Editor[m
[32m+[m
[32m+[m[32m-- First, let's see what columns your table actually has[m
[32m+[m[32mSELECT column_name, data_type, is_nullable, column_default[m
[32m+[m[32mFROM information_schema.columns[m[41m [m
[32m+[m[32mWHERE table_name = 'waitlist'[m[41m [m
[32m+[m[32mORDER BY ordinal_position;[m
[32m+[m
[32m+[m[32m-- Drop existing policies if they exist[m
[32m+[m[32mDROP POLICY IF EXISTS "Allow anonymous inserts" ON waitlist;[m
[32m+[m[32mDROP POLICY IF EXISTS "Allow email existence check" ON waitlist;[m
[32m+[m[32mDROP POLICY IF EXISTS "Allow anonymous updates" ON waitlist;[m
[32m+[m
[32m+[m[32m-- Enable Row Level Security (if not already enabled)[m
[32m+[m[32mALTER TABLE waitlist ENABLE ROW LEVEL SECURITY;[m
[32m+[m
[32m+[m[32m-- Create new policies that allow anonymous access[m
[32m+[m[32mCREATE POLICY "Allow anonymous inserts" ON waitlist[m
[32m+[m[32m    FOR INSERT[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    WITH CHECK (true);[m
[32m+[m
[32m+[m[32mCREATE POLICY "Allow email existence check" ON waitlist[m
[32m+[m[32m    FOR SELECT[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    USING (true);[m
[32m+[m
[32m+[m[32mCREATE POLICY "Allow anonymous updates" ON waitlist[m
[32m+[m[32m    FOR UPDATE[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    USING (true)[m
[32m+[m[32m    WITH CHECK (true);[m
[32m+[m
[32m+[m[32m-- Test the policies by trying to insert a test record[m
[32m+[m[32mINSERT INTO waitlist (email, source)[m[41m [m
[32m+[m[32mVALUES ('test-policy@example.com', 'policy_test')[m
[32m+[m[32mON CONFLICT (email) DO NOTHING;[m
[32m+[m
[32m+[m[32m-- Verify the insert worked[m
[32m+[m[32mSELECT * FROM waitlist WHERE email = 'test-policy@example.com';[m
[32m+[m
[32m+[m[32m-- Clean up test record[m
[32m+[m[32mDELETE FROM waitlist WHERE email = 'test-policy@example.com';[m
[32m+[m
[32m+[m[32m-- Show current policies[m
[32m+[m[32mSELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check[m
[32m+[m[32mFROM pg_policies[m[41m [m
[32m+[m[32mWHERE tablename = 'waitlist';[m
[1mdiff --git a/setup-database.sql b/setup-database.sql[m
[1mnew file mode 100644[m
[1mindex 0000000..08bc756[m
[1m--- /dev/null[m
[1m+++ b/setup-database.sql[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m-- ProfitLens Waitlist Database Setup[m
[32m+[m[32m-- Run this in your Supabase SQL Editor[m
[32m+[m
[32m+[m[32m-- Create the waitlist table[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS waitlist ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    email VARCHAR(255) UNIQUE NOT NULL,[m
[32m+[m[32m    source VARCHAR(50) DEFAULT 'landing_page',[m
[32m+[m[32m    referrer TEXT,[m
[32m+[m[32m    utm_source VARCHAR(100),[m
[32m+[m[32m    utm_medium VARCHAR(100),[m
[32m+[m[32m    utm_campaign VARCHAR(100),[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),[m
[32m+[m[32m    confirmed BOOLEAN DEFAULT FALSE[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Enable Row Level Security[m
[32m+[m[32mALTER TABLE waitlist ENABLE ROW LEVEL SECURITY;[m
[32m+[m
[32m+[m[32m-- Allow anonymous inserts (required for the form to work)[m
[32m+[m[32mCREATE POLICY "Allow anonymous inserts" ON waitlist[m
[32m+[m[32m    FOR INSERT[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    WITH CHECK (true);[m
[32m+[m
[32m+[m[32m-- Allow checking if email exists (for duplicate detection)[m
[32m+[m[32mCREATE POLICY "Allow email existence check" ON waitlist[m
[32m+[m[32m    FOR SELECT[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    USING (true);[m
[32m+[m
[32m+[m[32m-- Allow updates (for tracking data)[m
[32m+[m[32mCREATE POLICY "Allow anonymous updates" ON waitlist[m
[32m+[m[32m    FOR UPDATE[m
[32m+[m[32m    TO anon[m
[32m+[m[32m    USING (true)[m
[32m+[m[32m    WITH CHECK (true);[m
[32m+[m
[32m+[m[32m-- Create indexes for better performance[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_waitlist_email ON waitlist(email);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_waitlist_created_at ON waitlist(created_at);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_waitlist_source ON waitlist(source);[m
[32m+[m
[32m+[m[32m-- Optional: Create a function to automatically update the updated_at timestamp[m
[32m+[m[32mCREATE OR REPLACE FUNCTION update_updated_at_column()[m
[32m+[m[32mRETURNS TRIGGER AS $$[m
[32m+[m[32mBEGIN[m
[32m+[m[32m    NEW.updated_at = NOW();[m
[32m+[m[32m    RETURN NEW;[m
[32m+[m[32mEND;[m
[32m+[m[32m$$ language 'plpgsql';[m
[32m+[m
[32m+[m[32m-- Create trigger to automatically update updated_at[m
[32m+[m[32mCREATE TRIGGER update_waitlist_updated_at[m[41m [m
[32m+[m[32m    BEFORE UPDATE ON waitlist[m[41m [m
[32m+[m[32m    FOR EACH ROW[m[41m [m
[32m+[m[32m    EXECUTE FUNCTION update_updated_at_column();[m
[32m+[m
[32m+[m[32m-- Test the setup by inserting a sample record (optional)[m
[32m+[m[32m-- INSERT INTO waitlist (email, source) VALUES ('test@example.com', 'setup_test');[m
[32m+[m
[32m+[m[32m-- Verify the setup[m
[32m+[m[32mSELECT[m[41m [m
[32m+[m[32m    'Table created successfully' as status,[m
[32m+[m[32m    COUNT(*) as record_count[m
[32m+[m[32mFROM waitlist;[m
[1mdiff --git a/src/app/api/waitlist/route.ts b/src/app/api/waitlist/route.ts[m
[1mindex dc3a568..19e93b4 100644[m
[1m--- a/src/app/api/waitlist/route.ts[m
[1m+++ b/src/app/api/waitlist/route.ts[m
[36m@@ -5,41 +5,20 @@[m [mimport { headers } from 'next/headers'[m
 // Email validation regex[m
 const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/[m
 [m
[31m-// Rate limiting helper (simplified for production)[m
[31m-function checkRateLimit(ip: string): boolean {[m
[31m-  // For now, disable rate limiting in production to avoid issues[m
[31m-  // TODO: Implement proper rate limiting with Redis or similar[m
[31m-  return true[m
[31m-}[m
[31m-[m
 // POST /api/waitlist - Add email to waitlist[m
 export async function POST(request: NextRequest) {[m
   try {[m
[32m+[m[32m    console.log('üöÄ Starting waitlist API request...')[m
[32m+[m[41m    [m
     // Check if Supabase is configured[m
     if (!isSupabaseConfigured()) {[m
[32m+[m[32m      console.error('‚ùå Supabase not configured')[m
       return NextResponse.json([m
         { error: 'Database is not configured. Please check your environment variables.' },[m
         { status: 500 }[m
       )[m
     }[m
 [m
[31m-    // Get request metadata[m
[31m-    const headersList = await headers()[m
[31m-    const forwardedFor = headersList.get('x-forwarded-for')[m
[31m-    const realIp = headersList.get('x-real-ip')[m
[31m-    const ip = forwardedFor ? forwardedFor.split(',')[0].trim() : [m
[31m-               realIp || [m
[31m-               'unknown'[m
[31m-    const userAgent = headersList.get('user-agent') || 'unknown'[m
[31m-[m
[31m-    // Rate limiting (disabled for now)[m
[31m-    if (!checkRateLimit(ip)) {[m
[31m-      return NextResponse.json([m
[31m-        { error: 'Too many requests. Please try again later.' },[m
[31m-        { status: 429 }[m
[31m-      )[m
[31m-    }[m
[31m-[m
     const body = await request.json()[m
     const { [m
       email, [m
[36m@@ -52,22 +31,36 @@[m [mexport async function POST(request: NextRequest) {[m
       utmCampaign[m
     } = body[m
 [m
[32m+[m[32m    console.log('üìß Processing email:', email)[m
[32m+[m
     // Validate email[m
     if (!email || !emailRegex.test(email)) {[m
[32m+[m[32m      console.log('‚ùå Invalid email format')[m
       return NextResponse.json([m
         { error: 'Please enter a valid email address' },[m
         { status: 400 }[m
       )[m
     }[m
 [m
[32m+[m[32m    console.log('üîç Checking if email exists...')[m
[32m+[m
     // Check if email already exists[m
[31m-    const { data: existingSignup } = await supabase[m
[32m+[m[32m    const { data: existingSignup, error: checkError } = await supabase[m
       .from('waitlist')[m
       .select('email, created_at')[m
       .eq('email', email.toLowerCase())[m
[31m-      .single()[m
[32m+[m[32m      .maybeSingle()[m
[32m+[m
[32m+[m[32m    if (checkError) {[m
[32m+[m[32m      console.error('‚ùå Error checking existing email:', checkError)[m
[32m+[m[32m      return NextResponse.json([m
[32m+[m[32m        { error: 'Database connection error. Please try again.' },[m
[32m+[m[32m        { status: 500 }[m
[32m+[m[32m      )[m
[32m+[m[32m    }[m
 [m
     if (existingSignup) {[m
[32m+[m[32m      console.log('‚ÑπÔ∏è Email already exists')[m
       return NextResponse.json([m
         { [m
           error: 'You\'re already on the waitlist! We\'ll notify you when ProfitLens is ready.',[m
[36m@@ -78,62 +71,62 @@[m [mexport async function POST(request: NextRequest) {[m
       )[m
     }[m
 [m
[31m-    // Insert new signup with enhanced tracking[m
[32m+[m[32m    console.log('üíæ Inserting new signup...')[m
[32m+[m
[32m+[m[32m    // Insert new signup with minimal data first[m
     const { data: newSignup, error: insertError } = await supabase[m
       .from('waitlist')[m
       .insert({[m
         email: email.toLowerCase(),[m
[31m-        source,[m
[31m-        creator_type: creatorType,[m
[31m-        estimated_monthly_revenue: estimatedRevenue,[m
[31m-        referral_source: referralSource,[m
[31m-        ip_address: ip,[m
[31m-        user_agent: userAgent,[m
[31m-        confirmed: false,[m
[31m-        // Additional UTM tracking[m
[31m-        utm_source: utmSource,[m
[31m-        utm_medium: utmMedium,[m
[31m-        utm_campaign: utmCampaign[m
[32m+[m[32m        source: 'landing_page'[m
       })[m
       .select()[m
       .single()[m
 [m
     if (insertError) {[m
[31m-      console.error('Supabase insert error:', insertError)[m
[32m+[m[32m      console.error('‚ùå Insert error:', insertError)[m
[32m+[m[32m      console.error('Error details:', JSON.stringify(insertError))[m
[32m+[m[41m      [m
[32m+[m[32m      // Provide specific error messages[m
[32m+[m[32m      if (insertError.code === '23505') {[m
[32m+[m[32m        return NextResponse.json([m
[32m+[m[32m          { error: 'You\'re already on the waitlist!' },[m
[32m+[m[32m          { status: 409 }[m
[32m+[m[32m        )[m
[32m+[m[32m      } else if (insertError.code === '42P01') {[m
[32m+[m[32m        return NextResponse.json([m
[32m+[m[32m          { error: 'Database table not found. Please contact support.' },[m
[32m+[m[32m          { status: 500 }[m
[32m+[m[32m        )[m
[32m+[m[32m      } else if (insertError.code === '42501') {[m
[32m+[m[32m        return NextResponse.json([m
[32m+[m[32m          { error: 'Database permission error. Please contact support.' },[m
[32m+[m[32m          { status: 500 }[m
[32m+[m[32m        )[m
[32m+[m[32m      }[m
[32m+[m[41m      [m
       return NextResponse.json([m
[31m-        { error: 'Something went wrong. Please try again.' },[m
[32m+[m[32m        { error: 'Database error. Please try again.' },[m
         { status: 500 }[m
       )[m
     }[m
 [m
[32m+[m[32m    console.log('‚úÖ Successfully added to waitlist:', newSignup.id)[m
[32m+[m
     // Get waitlist position for social proof[m
     const { count } = await supabase[m
       .from('waitlist')[m
       .select('*', { count: 'exact', head: true })[m
 [m
[31m-    // Generate confirmation token[m
[31m-    const confirmationToken = crypto.randomUUID()[m
[31m-    await supabaseAdmin[m
[31m-      .from('email_confirmation_tokens')[m
[31m-      .insert({[m
[31m-        email: email.toLowerCase(),[m
[31m-        token: confirmationToken,[m
[31m-        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours[m
[31m-      })[m
[31m-[m
[31m-    // Optional: Send welcome email via Supabase Edge Function[m
[31m-    // This would require setting up an Edge Function for email sending[m
[31m-[m
     return NextResponse.json({[m
       success: true,[m
[31m-      message: 'üéâ Welcome to the waitlist! Check your email for confirmation.',[m
[32m+[m[32m      message: 'üéâ Welcome to the waitlist! We\'ll notify you when ProfitLens is ready.',[m
       waitlistPosition: count || 1,[m
[31m-      confirmationToken,[m
       estimatedLaunch: 'Q4 2025'[m
     })[m
 [m
   } catch (error) {[m
[31m-    console.error('Waitlist API error:', error)[m
[32m+[m[32m    console.error('‚ùå Unexpected error:', error)[m
     return NextResponse.json([m
       { error: 'Something went wrong. Please try again or email us at support@profitlens.co' },[m
       { status: 500 }[m
[36m@@ -144,6 +137,8 @@[m [mexport async function POST(request: NextRequest) {[m
 // GET /api/waitlist - Get waitlist stats (for admin)[m
 export async function GET(request: NextRequest) {[m
   try {[m
[32m+[m[32m    console.log('üìä Getting waitlist stats...')[m
[32m+[m[41m    [m
     // Check if Supabase is configured[m
     if (!isSupabaseConfigured()) {[m
       return NextResponse.json([m
[36m@@ -151,72 +146,33 @@[m [mexport async function GET(request: NextRequest) {[m
         { status: 500 }[m
       )[m
     }[m
[31m-    const { searchParams } = new URL(request.url)[m
[31m-    const token = searchParams.get('token')[m
[31m-    const action = searchParams.get('action')[m
[31m-[m
[31m-    // Handle email confirmation[m
[31m-    if (action === 'confirm' && token) {[m
[31m-      const { data: tokenData } = await supabaseAdmin[m
[31m-        .from('email_confirmation_tokens')[m
[31m-        .select('email, expires_at')[m
[31m-        .eq('token', token)[m
[31m-        .single()[m
[31m-[m
[31m-      if (!tokenData) {[m
[31m-        return NextResponse.redirect('/waitlist/invalid')[m
[31m-      }[m
[31m-[m
[31m-      if (new Date(tokenData.expires_at) < new Date()) {[m
[31m-        return NextResponse.redirect('/waitlist/invalid')[m
[31m-      }[m
[31m-[m
[31m-      // Confirm email[m
[31m-      await supabaseAdmin[m
[31m-        .from('waitlist')[m
[31m-        .update({ confirmed: true })[m
[31m-        .eq('email', tokenData.email)[m
[31m-[m
[31m-      // Delete used token[m
[31m-      await supabaseAdmin[m
[31m-        .from('email_confirmation_tokens')[m
[31m-        .delete()[m
[31m-        .eq('token', token)[m
[31m-[m
[31m-      return NextResponse.redirect('/waitlist/confirmed')[m
[31m-    }[m
 [m
[31m-    // Get waitlist stats (requires admin authentication in production)[m
[31m-    const { data: signups, count } = a